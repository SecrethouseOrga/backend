{
  "swagger": "2.0",
  "info": {
    "description": "Documentation for Secret House Game API.",
    "version": "1.0.0",
    "title": "Secret House Game"
  },
  "host": "https://secrethouse-api.herokuapp.com/",
  "tags": [
    {
      "name": "auth",
      "description": "Everything about API authentication"
    },
    {
      "name": "games",
      "description": "Everything about your games"
    },
    {
      "name": "players",
      "description": "Everything about your players"
    },
    {
      "name": "roomtypes",
      "description": "Everything about your room's type"
    },
    {
      "name": "roomgame",
      "description": "Everything about your room's game"
    },
    {
      "name": "events",
      "description": "Everything about your events"
    },
    {
      "name": "buzzs",
      "description": "Everything about your buzzes"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register a new user",
        "description": "",
        "operationId": "register",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login user",
        "description": "",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Token"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/games": {
      "post": {
        "tags": [
          "games"
        ],
        "summary": "Create a new game",
        "description": "",
        "operationId": "createGame",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created game object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GameData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/games/{code}": {
      "get": {
        "tags": [
          "games"
        ],
        "summary": "Find game by code",
        "description": "Returns a single game",
        "operationId": "getGameByCode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Code of game to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Game"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/games/{id}/players": {
      "get": {
        "tags": [
          "games"
        ],
        "summary": "Find all players of a game by ID",
        "description": "",
        "operationId": "getAllPlayersGameById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the game",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Player"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/games/{id}/rooms": {
      "get": {
        "tags": [
          "games"
        ],
        "summary": "Find all rooms of a game by ID",
        "description": "",
        "operationId": "getAllRoomsGameById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the game",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoomGame"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/games/{id}/events": {
      "get": {
        "tags": [
          "games"
        ],
        "summary": "Find all events of a game by ID",
        "description": "",
        "operationId": "getAllEventsGameById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the game",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/games/{id}/secrets": {
      "get": {
        "tags": [
          "games"
        ],
        "summary": "Find all secrets of a game by ID",
        "description": "",
        "operationId": "getAllSecretsGameById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the game",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Secret"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/players": {
      "post": {
        "tags": [
          "players"
        ],
        "summary": "Create a new player",
        "description": "",
        "operationId": "createPlayer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created player object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlayerData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Player"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/players/{id}": {
      "get": {
        "tags": [
          "players"
        ],
        "summary": "Find player by ID",
        "description": "Returns a single player",
        "operationId": "getPlayerById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of player to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Player"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/roomtypes/": {
      "post": {
        "tags": [
          "roomtypes"
        ],
        "summary": "Create a new room type",
        "description": "",
        "operationId": "createRoomType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created room object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoomData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Room"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/roomtypes": {
      "get": {
        "tags": [
          "roomtypes"
        ],
        "summary": "Get all rooms type",
        "description": "",
        "operationId": "getAllRoomsType",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Room"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/roomtypes/{id}": {
      "get": {
        "tags": [
          "roomtypes"
        ],
        "summary": "Find room by ID",
        "description": "Returns a single room",
        "operationId": "getRoomTypeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of room to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Room"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/roomgame": {
      "post": {
        "tags": [
          "roomgame"
        ],
        "summary": "Create a new room game",
        "description": "",
        "operationId": "createRoomGame",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created room game object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoomGameData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RoomGame"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/events": {
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Create a new event",
        "description": "",
        "operationId": "createEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created event object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Find event by ID",
        "description": "Returns a single event",
        "operationId": "getEventById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/buzzs": {
      "post": {
        "tags": [
          "buzzs"
        ],
        "summary": "Create a new buzz",
        "description": "",
        "operationId": "createBuzz",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created buzz object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BuzzData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Buzz"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/buzzs/{id}": {
      "get": {
        "tags": [
          "buzzs"
        ],
        "summary": "Find buzz by ID",
        "description": "Returns a single buzz",
        "operationId": "getBuzzById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of buzz to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Buzz"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "buzzs"
        ],
        "summary": "Update an existing buzz",
        "description": "",
        "operationId": "updateBuzz",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of buzz to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Buzz"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "profilePic": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "UserData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "marcel.jean"
        },
        "email": {
          "type": "string",
          "example": "marcel.jean@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "Mon.Super.Mot.De.Passe."
        }
      }
    },
    "LoginData": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "marcel.jean@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "Mon.Super.Mot.De.Passe."
        }
      }
    },
    "Game": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "maxPlayers": {
          "type": "integer",
          "format": "int64"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "eventIntervalQty": {
          "type": "integer",
          "format": "int64"
        },
        "eventIntervalUnity": {
          "type": "string",
          "description": "Delay Unities",
          "enum": [
            "MINUTES",
            "HOURS",
            "DAYS"
          ]
        },
        "eliminationDelayQty": {
          "type": "integer",
          "format": "int64"
        },
        "eliminationDelayUnity": {
          "type": "string",
          "description": "Delay Unities",
          "enum": [
            "MINUTES",
            "HOURS",
            "DAYS"
          ]
        },
        "code": {
          "type": "string",
          "description": "game code"
        },
        "owner": {
          "type": "object",
          "description": "Owner of the game : User"
        }
      }
    },
    "GameData": {
      "type": "object",
      "properties": {
        "maxPlayers": {
          "type": "integer",
          "format": "int64",
          "example": 10
        },
        "eventIntervalQty": {
          "type": "integer",
          "format": "int64",
          "example": 30
        },
        "eliminationDelayQty": {
          "type": "integer",
          "format": "int64",
          "example": 10
        }
      }
    },
    "Player": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "jackpot": {
          "type": "integer",
          "format": "int64"
        },
        "secret": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "isReady": {
          "type": "boolean"
        },
        "isBuzzed": {
          "type": "boolean"
        },
        "canBuzz": {
          "type": "boolean"
        },
        "canBeBuzzed": {
          "type": "boolean"
        },
        "isNominated": {
          "type": "boolean"
        },
        "isEliminated": {
          "type": "boolean"
        },
        "secretDiscovered": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "owner": {
          "type": "object",
          "description": "Player owner : User"
        },
        "game": {
          "type": "object",
          "description": "Player game: Game"
        }
      }
    },
    "PlayerData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Marcel"
        },
        "secret": {
          "type": "string",
          "example": "J'aime la pizza à l'ananas"
        },
        "gender": {
          "type": "string",
          "example": "male"
        },
        "gameCode": {
          "type": "string",
          "example": "#jdiohjjaoo"
        }
      }
    },
    "Room": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "isSecret": {
          "type": "boolean"
        }
      }
    },
    "RoomData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "La Chambre des Secrets"
        },
        "isSecret": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "RoomGame": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isLocked": {
          "type": "boolean"
        },
        "room": {
          "type": "object",
          "description": "Associated roomType"
        },
        "game":{
          "type": "object",
          "description": "Associated game"
        }
      }
    },
    "RoomGameData": {
      "type": "object",
      "properties": {
        "isLocked": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "content": {
          "type": "string"
        },
        "player":{
          "type": "object",
          "description": "Associated player"
        },
        "game": {
          "type": "object",
          "description": "Associated game"
        },
        "type": {
          "type": "string",
          "description": "EventTypes",
          "enum": [
            "EVENT",
            "NOMINATION",
            "BUZZ",
            "ELIMINATION"
          ]
        },
        "status": {
          "type": "string",
          "description": "EventStatus",
          "enum": [
            "CREATED",
            "STARTED",
            "ENDED",
            "CANCELLED"
          ]
        }
      }
    },
    "EventData": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "example": "Evenement mystère"
        },
        "gameId": {
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      }
    },
    "Buzz": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "buzzer": {
          "type": "object",
          "description": "Buzzer player"
        },
        "event": {
          "type": "object",
          "description": "Associated event"
        },
        "target": {
          "type": "object",
          "description": "Target player"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "secret": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "BuzzStatus",
          "enum": [
            "pending",
            "correct",
            "wrong"
          ]
        }
      }
    },
    "BuzzData": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string",
          "example": "Il aime la pizza à l'ananas"
        },
        "targetId": {
          "type": "integer",
          "format": "int64",
          "example": 3
        }
      }
    },
    "Secret": {
      "type": "object",
      "properties": {
        "playerId": {
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "secret": {
          "type": "string",
          "example": "Je suis le christ cosmique"
        }
      }
    },
    "Token": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImhAaC5jb20iLCJpZCI6MSwiaWF0IjoxNjU1ODAyMjg1LCJleHAiOjE2NTU4ODg2ODV9.XNBd0KipCHEPmf3Q2SpODhs2V5-dtH2Dudck8q0LXK8"
        }
      }
    }
  }
}
